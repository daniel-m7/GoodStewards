# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\r\n\r\nclient<llm> CustomGPT4o {\r\n  provider openai\r\n  options {\r\n    model \"gpt-4o\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomGPT4oMini {\r\n  provider openai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"gpt-4o-mini\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomSonnet {\r\n  provider anthropic\r\n  options {\r\n    model \"claude-3-5-sonnet-20241022\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n\r\nclient<llm> CustomHaiku {\r\n  provider anthropic\r\n  retry_policy Constant\r\n  options {\r\n    model \"claude-3-haiku-20240307\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\r\nclient<llm> CustomFast {\r\n  provider round-robin\r\n  options {\r\n    // This will alternate between the two clients\r\n    strategy [CustomGPT4oMini, CustomHaiku]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\r\nclient<llm> OpenaiFallback {\r\n  provider fallback\r\n  options {\r\n    // This will try the clients in order until one succeeds\r\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/retry\r\nretry_policy Constant {\r\n  max_retries 3\r\n  // Strategy is optional\r\n  strategy {\r\n    type constant_delay\r\n    delay_ms 200\r\n  }\r\n}\r\n\r\nretry_policy Exponential {\r\n  max_retries 2\r\n  // Strategy is optional\r\n  strategy {\r\n    type exponential_backoff\r\n    delay_ms 300\r\n    multiplier 1.5\r\n    max_delay_ms 10000\r\n  }\r\n}",
    "extract_receipts.baml": "// The BAML linter would be here if we had one.\r\n// Defines the AI function for extracting structured data from a receipt image.\r\n\r\nclient GPT4Turbo {\r\n  provider openai\r\n}\r\n\r\n// Define the structured data model we want to extract.\r\nclass ReceiptData {\r\n  vendor_name string\r\n  purchase_date string\r\n  county string\r\n  subtotal_amount float\r\n  tax_amount float\r\n  total_amount float\r\n  expense_category string @description(\"Categorize the expense based on the items. Examples: Food, Office Supplies, Travel, Utilities, etc.\")\r\n  is_donation bool\r\n  tax_breakdowns TaxBreakdown[]\r\n}\r\n\r\nenum TaxType {\r\n  State\r\n  County\r\n  Transit\r\n  Food\r\n} \r\n\r\nclass TaxBreakdown {\r\n  tax_type TaxType\r\n  tax_rate float\r\n  amount float\r\n}\r\n\r\n// Define the AI function.\r\n// The implementation of this function will be handled by the BAML runtime,\r\n// which will call the specified LLM provider (e.g., Google's Gemini).\r\nfunction ExtractReceiptData(\r\n  // Input is the receipt image.\r\n  receipt: image\r\n) -> ReceiptData {\r\n  client GPT4Turbo\r\n  prompt #\"\r\n    Analyze the following receipt image and extract the data into a structured JSON format according to the defined schema.\r\n\r\n    - vendor_name: The name of the store or vendor.\r\n    - purchase_date: The date of the purchase.\r\n    - county: The county where the purchase was made. If not explicitly mentioned, infer from the city or store location if possible.\r\n    - subtotal_amount: The subtotal before taxes.\r\n    - tax_amount: The total amount of all taxes.\r\n    - total_amount: The final total amount.\r\n    - expense_category: The category of the expense.\r\n    - is_donation: Set to true if the receipt is for a donation, otherwise false.\r\n    - tax_breakdowns: A list of all individual taxes (state, county, transit, food) and their amounts.\r\n    - tax_rate: The rate of the tax.\r\n\r\n    Image:\r\n    {{ receipt }}\r\n  \"#\r\n}\r\n\r\ntest Test_Receipt {\r\nfunctions [ExtractReceiptData]\r\n  args {\r\n    receipt {\r\n      url \"https://res.cloudinary.com/dqjkf4zsf/image/upload/v1735354706/mexico_receipt.png\"\r\n    }\r\n  }\r\n}\r\n",
}

def get_baml_files():
    return _file_map