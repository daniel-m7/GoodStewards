# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\r\n\r\nclient<llm> CustomGPT4o {\r\n  provider openai\r\n  options {\r\n    model \"gpt-4o\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomGPT4oMini {\r\n  provider openai\r\n  retry_policy Exponential\r\n  options {\r\n    model \"gpt-4o-mini\"\r\n    api_key env.OPENAI_API_KEY\r\n  }\r\n}\r\n\r\nclient<llm> CustomSonnet {\r\n  provider anthropic\r\n  options {\r\n    model \"claude-3-5-sonnet-20241022\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n\r\nclient<llm> CustomHaiku {\r\n  provider anthropic\r\n  retry_policy Constant\r\n  options {\r\n    model \"claude-3-haiku-20240307\"\r\n    api_key env.ANTHROPIC_API_KEY\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\r\nclient<llm> CustomFast {\r\n  provider round-robin\r\n  options {\r\n    // This will alternate between the two clients\r\n    strategy [CustomGPT4oMini, CustomHaiku]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\r\nclient<llm> OpenaiFallback {\r\n  provider fallback\r\n  options {\r\n    // This will try the clients in order until one succeeds\r\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\r\n  }\r\n}\r\n\r\n// https://docs.boundaryml.com/docs/snippets/clients/retry\r\nretry_policy Constant {\r\n  max_retries 3\r\n  // Strategy is optional\r\n  strategy {\r\n    type constant_delay\r\n    delay_ms 200\r\n  }\r\n}\r\n\r\nretry_policy Exponential {\r\n  max_retries 2\r\n  // Strategy is optional\r\n  strategy {\r\n    type exponential_backoff\r\n    delay_ms 300\r\n    multiplier 1.5\r\n    max_delay_ms 10000\r\n  }\r\n}\r\n\r\n",
    "extract_receipts.baml": "// The BAML linter would be here if we had one.\r\n// Defines the AI function for extracting structured data from a receipt image.\r\n\r\n\r\n\r\n// Define the structured data model we want to extract.\r\nclass ReceiptData {\r\n  vendor_name string\r\n  purchase_date string\r\n  county string\r\n  subtotal_amount float\r\n  tax_amount float\r\n  total_amount float\r\n  expense_category string @description(\"Categorize the expense based on the items. Examples: Food, Office Supplies, Travel, Utilities, etc.\")\r\n  is_donation bool\r\n  tax_breakdowns TaxBreakdown[]\r\n}\r\n\r\nenum TaxType {\r\n  State\r\n  County\r\n  Transit\r\n  Food\r\n} \r\n\r\nclass TaxBreakdown {\r\n  tax_type TaxType\r\n  tax_rate float\r\n  amount float\r\n}\r\n\r\n// Define the AI function.\r\n// The implementation of this function will be handled by the BAML runtime,\r\n// which will call the specified LLM provider (e.g., Google's Gemini).\r\nfunction ExtractReceiptData(\r\n  // Input is the receipt image.\r\n  receipt: image\r\n) -> ReceiptData {\r\n  client CustomGPT4o\r\n    prompt #\"\r\n        {{_.role(\"user\")}}\r\n        \r\n        You are an expert in extracting structured data from images of receipts.\r\n        But you are also an expert preparer of E585 for a non-profit organization in the USA.\r\n        Your task is to extract the following details from the receipt image:\r\n        - Total amount\r\n        - Date of the transaction\r\n        - Business name\r\n        - Address of the business\r\n        - County of the business \r\n        - Total tax amount \r\n        - State Sales Tax \r\n        - Food County Transit Sales Tax\r\n        - Expense Category \r\n        - Tax Rate\r\n\r\n        Extract details from this image of a receipt: {{ receipt }}\r\n\r\n        The county name may need to be inferred from the address info extracted. \r\n        Example: 1005 Jeweled Crown Ct, Indian Trail, NC 28079, USA, so return Union County, NC, USA.\r\n\r\n        Return the extracted data in the following JSON format:\r\n        ```json\r\n        {\r\n            \"total_amount\": 123.45,\r\n            \"date\": \"2023-10-01\",\r\n            \"business\": \"Example Business\",\r\n            \"address\": \"123 Example St, City, State, ZIP\",\r\n            \"county\": \"Example County\",\r\n            \"total_sales_tax\": 5.00,\r\n            \"state_tax\": 2.50,\r\n            \"food_county_transit_tax\": 1.50,\r\n            \"expense_category\": \"Food\",\r\n            \"tax_rate\": 0.05\r\n        }\r\n        ```\r\n\r\n        Ensure that the output is in the specified JSON format and includes all relevant fields.\r\n        {{ ctx.output_format }}\r\n    \"#\r\n}\r\n\r\ntest Test_Receipt {\r\nfunctions [ExtractReceiptData]\r\n  args {\r\n    receipt {\r\n      url \"https://github.com/daniel-m7/GoodStewards/raw/main/data/1-receipt.png\"\r\n    }\r\n  }\r\n}\r\n",
}

def get_baml_files():
    return _file_map