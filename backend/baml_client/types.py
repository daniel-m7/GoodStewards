# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (1)
# #########################################################################

class TaxType(str, Enum):
    State = "State"
    County = "County"
    Transit = "Transit"
    Food = "Food"

# #########################################################################
# Generated classes (2)
# #########################################################################

class ReceiptData(BaseModel):
    vendor_name: str
    purchase_date: str
    county: str
    subtotal_amount: float
    tax_amount: float
    total_amount: float
    expense_category: str
    is_donation: bool
    tax_breakdowns: typing.List["TaxBreakdown"]

class TaxBreakdown(BaseModel):
    tax_type: TaxType
    tax_rate: float
    amount: float

# #########################################################################
# Generated type aliases (0)
# #########################################################################
